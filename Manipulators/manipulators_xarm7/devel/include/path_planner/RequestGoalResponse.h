// Generated by gencpp from file path_planner/RequestGoalResponse.msg
// DO NOT EDIT!


#ifndef PATH_PLANNER_MESSAGE_REQUESTGOALRESPONSE_H
#define PATH_PLANNER_MESSAGE_REQUESTGOALRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace path_planner
{
template <class ContainerAllocator>
struct RequestGoalResponse_
{
  typedef RequestGoalResponse_<ContainerAllocator> Type;

  RequestGoalResponse_()
    : goal()
    , status(false)  {
    }
  RequestGoalResponse_(const ContainerAllocator& _alloc)
    : goal(_alloc)
    , status(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _goal_type;
  _goal_type goal;

   typedef uint8_t _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::path_planner::RequestGoalResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::path_planner::RequestGoalResponse_<ContainerAllocator> const> ConstPtr;

}; // struct RequestGoalResponse_

typedef ::path_planner::RequestGoalResponse_<std::allocator<void> > RequestGoalResponse;

typedef boost::shared_ptr< ::path_planner::RequestGoalResponse > RequestGoalResponsePtr;
typedef boost::shared_ptr< ::path_planner::RequestGoalResponse const> RequestGoalResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::path_planner::RequestGoalResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::path_planner::RequestGoalResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::path_planner::RequestGoalResponse_<ContainerAllocator1> & lhs, const ::path_planner::RequestGoalResponse_<ContainerAllocator2> & rhs)
{
  return lhs.goal == rhs.goal &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::path_planner::RequestGoalResponse_<ContainerAllocator1> & lhs, const ::path_planner::RequestGoalResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace path_planner

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::path_planner::RequestGoalResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_planner::RequestGoalResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_planner::RequestGoalResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_planner::RequestGoalResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_planner::RequestGoalResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_planner::RequestGoalResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::path_planner::RequestGoalResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e909f1629603b83f95a1577058682891";
  }

  static const char* value(const ::path_planner::RequestGoalResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe909f1629603b83fULL;
  static const uint64_t static_value2 = 0x95a1577058682891ULL;
};

template<class ContainerAllocator>
struct DataType< ::path_planner::RequestGoalResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "path_planner/RequestGoalResponse";
  }

  static const char* value(const ::path_planner::RequestGoalResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::path_planner::RequestGoalResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string goal\n"
"bool status\n"
"\n"
;
  }

  static const char* value(const ::path_planner::RequestGoalResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::path_planner::RequestGoalResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.goal);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RequestGoalResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::path_planner::RequestGoalResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::path_planner::RequestGoalResponse_<ContainerAllocator>& v)
  {
    s << indent << "goal: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.goal);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATH_PLANNER_MESSAGE_REQUESTGOALRESPONSE_H
