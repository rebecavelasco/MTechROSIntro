// Generated by gencpp from file listener/time_msg.msg
// DO NOT EDIT!


#ifndef LISTENER_MESSAGE_TIME_MSG_H
#define LISTENER_MESSAGE_TIME_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace listener
{
template <class ContainerAllocator>
struct time_msg_
{
  typedef time_msg_<ContainerAllocator> Type;

  time_msg_()
    : date()
    , hour()  {
    }
  time_msg_(const ContainerAllocator& _alloc)
    : date(_alloc)
    , hour(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _date_type;
  _date_type date;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _hour_type;
  _hour_type hour;





  typedef boost::shared_ptr< ::listener::time_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::listener::time_msg_<ContainerAllocator> const> ConstPtr;

}; // struct time_msg_

typedef ::listener::time_msg_<std::allocator<void> > time_msg;

typedef boost::shared_ptr< ::listener::time_msg > time_msgPtr;
typedef boost::shared_ptr< ::listener::time_msg const> time_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::listener::time_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::listener::time_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::listener::time_msg_<ContainerAllocator1> & lhs, const ::listener::time_msg_<ContainerAllocator2> & rhs)
{
  return lhs.date == rhs.date &&
    lhs.hour == rhs.hour;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::listener::time_msg_<ContainerAllocator1> & lhs, const ::listener::time_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace listener

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::listener::time_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::listener::time_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::listener::time_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::listener::time_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::listener::time_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::listener::time_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::listener::time_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "772088bac049cb52a3d81e9740f95fb0";
  }

  static const char* value(const ::listener::time_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x772088bac049cb52ULL;
  static const uint64_t static_value2 = 0xa3d81e9740f95fb0ULL;
};

template<class ContainerAllocator>
struct DataType< ::listener::time_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "listener/time_msg";
  }

  static const char* value(const ::listener::time_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::listener::time_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string date\n"
"string hour\n"
;
  }

  static const char* value(const ::listener::time_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::listener::time_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.date);
      stream.next(m.hour);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct time_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::listener::time_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::listener::time_msg_<ContainerAllocator>& v)
  {
    s << indent << "date: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.date);
    s << indent << "hour: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.hour);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LISTENER_MESSAGE_TIME_MSG_H
